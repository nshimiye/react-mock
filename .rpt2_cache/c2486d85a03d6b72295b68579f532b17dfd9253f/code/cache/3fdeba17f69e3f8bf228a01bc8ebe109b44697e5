{"code":"import * as tslib_1 from \"tslib\";\r\n// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)\r\n// import \"core-js/fn/array.find\"\r\n// ...\r\nimport faker from 'faker';\r\nimport Pretender from 'pretender';\r\nvar DataGenerator = /** @class */ (function () {\r\n    function DataGenerator() {\r\n    }\r\n    DataGenerator.prototype.nextObject = function (count, schema) {\r\n        throw new Error('NOT Implemented');\r\n    };\r\n    DataGenerator.prototype.nextArray = function (count, schema) {\r\n        // throw new Error('NOT Implemented')\r\n        // START create object based on the schema\r\n        var createData = function (schema) {\r\n            return tslib_1.__assign({ id: uid.next().value }, Object.keys(schema).reduce(function (ac, key) {\r\n                ac[key] =\r\n                    typeof schema[key] === 'function' ? schema[key]() : schema[key];\r\n                return ac;\r\n            }, {}));\r\n        };\r\n        // END create object based on the schema\r\n        return Array.apply(null, { length: count }).map(function () { return createData(schema); });\r\n    };\r\n    DataGenerator.prototype.next = function (count, schema, returnObject) {\r\n        if (returnObject === void 0) { returnObject = false; }\r\n        if (returnObject) {\r\n            return this.nextObject(count, schema);\r\n        }\r\n        return this.nextArray(count, schema);\r\n    };\r\n    return DataGenerator;\r\n}());\r\nfunction Uid() {\r\n    return tslib_1.__generator(this, function (_a) {\r\n        switch (_a.label) {\r\n            case 0:\r\n                if (!true) return [3 /*break*/, 2];\r\n                return [4 /*yield*/, Faker.random.uuid()];\r\n            case 1:\r\n                _a.sent();\r\n                return [3 /*break*/, 0];\r\n            case 2: return [2 /*return*/];\r\n        }\r\n    });\r\n}\r\n// END helper functions\r\nvar ServerClass = /** @class */ (function () {\r\n    function ServerClass(dataGenerator) {\r\n        if (dataGenerator === void 0) { dataGenerator = new DataGenerator(); }\r\n        this.dataGenerator = dataGenerator;\r\n        this.routeMapList = [];\r\n    }\r\n    ServerClass.prototype.on = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.pretender = new (Pretender.bind.apply(Pretender, [void 0].concat(_this.routeMapList)))();\r\n            return resolve();\r\n        });\r\n    };\r\n    ServerClass.prototype.off = function () {\r\n        var _this = this;\r\n        return new Promise(function (resolve) {\r\n            _this.pretender.shutdown();\r\n            return resolve();\r\n        });\r\n    };\r\n    ServerClass.prototype.mockGet = function (endPoint, handler) {\r\n        var rest = [];\r\n        for (var _i = 2; _i < arguments.length; _i++) {\r\n            rest[_i - 2] = arguments[_i];\r\n        }\r\n        // START save handler to our pretender map\r\n        var dataGenerator = this.dataGenerator;\r\n        this.routeMapList.push(function routeMap() {\r\n            this.get.apply(this, [endPoint,\r\n                function (req) {\r\n                    return handler(req, dataGenerator);\r\n                }].concat(rest));\r\n        });\r\n        // END save handler to our pretender map\r\n    };\r\n    return ServerClass;\r\n}());\r\nexport default ServerClass;\r\nexport var Faker = faker;\r\nexport var uid = Uid();\r\nexport var Server = new ServerClass();\r\n//# sourceMappingURL=react-mock.js.map","map":{"version":3,"file":"react-mock.js","sourceRoot":"","sources":["src/react-mock.ts"],"names":[],"mappings":"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"},"dts":{"name":"/Users/marcellin.nshimiyimana@ibm.com/profession/projects/side/react-mock/react-mock.d.ts","text":"/// <reference types=\"faker\" />\r\nimport { ResponseData } from 'pretender';\r\nexport interface IDataGenerator {\r\n    next<T>(count: number, schema: T, returnObject?: boolean): Array<T> | {\r\n        [id: string]: T;\r\n    };\r\n}\r\nexport default class ServerClass {\r\n    private dataGenerator;\r\n    private pretender;\r\n    private routeMapList;\r\n    constructor(dataGenerator?: IDataGenerator);\r\n    on(): Promise<null | Error>;\r\n    off(): Promise<null | Error>;\r\n    mockGet(endPoint: string, handler: (req: Object, generator: IDataGenerator) => ResponseData | Promise<ResponseData>, ...rest: Array<any>): void;\r\n}\r\nexport declare const Faker: Faker.FakerStatic;\r\nexport declare const uid: IterableIterator<string>;\r\nexport declare const Server: ServerClass;\r\n"}}
